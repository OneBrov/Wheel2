{"version":3,"sources":["index.js"],"names":["Circle","props","ref","useRef","useEffect","canvas","current","context","getContext","ratio","getPixelRatio","width","getComputedStyle","getPropertyValue","slice","height","style","splitCount","radius","x","y","splitAngle","Math","PI","i","beginPath","moveTo","arc","lineWidth","hueValue","fillStyle","fill","strokeStyle","stroke","drawFullboxCircle","id","myId","transition","RollButton","useState","rotatecount","setRotate","className","onClick","console","log","elementName","document","getElementById","transform","GenreAPI","genres","setGenres","axios","method","url","then","response","data","map","g","name","ReactDOM","render","backingStore","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","window","devicePixelRatio"],"mappings":"4KAQOA,EAAS,SAACC,GACZ,IAAIC,EAAMC,mBA6BV,OA3BAC,qBAAU,WACP,IAAIC,EAASH,EAAII,QACbC,EAAUF,EAAOG,WAAW,MAE5BC,EAAQC,EAAcH,GACtBI,EAAQC,iBAAiBP,GACxBQ,iBAAiB,SACjBC,MAAM,GAAI,GACXC,EAASH,iBAAiBP,GACzBQ,iBAAiB,UACjBC,MAAM,GAAI,GAEfT,EAAOM,MAAQA,EAAQF,EAEvBJ,EAAOU,OAASA,EAASN,EACzBJ,EAAOW,MAAML,MAAb,UAAwBA,EAAxB,MACAN,EAAOW,MAAMD,OAAb,UAAyBA,EAAzB,OAwFR,SAA2BV,EAAQE,EAASU,GAQ1C,IAPA,IACIC,EADYb,EAAOM,MACA,EACnBQ,EAAID,EACJE,EAAIF,EAEJG,EAAa,EAAGC,KAAKC,GAAKN,EAErBO,EAAE,EAAGA,EAAGP,EAAWO,IAAI,CAC9BjB,EAAQkB,YACRlB,EAAQmB,OAAOP,EAAGC,GAClBb,EAAQoB,IAAIR,EAAGC,EAAGF,EAAQM,EAAEH,GAAaG,EAAE,GAAGH,GAAW,GACzDd,EAAQqB,UAAYV,EACpB,IAAIW,EAAa,GAAFL,EACfjB,EAAQuB,UAAY,OAASD,EAAW,aAGxCtB,EAAQwB,OACRxB,EAAQqB,UAAY,EACpBrB,EAAQyB,YAAc,OACtBzB,EAAQ0B,UAxGFC,CAAkB7B,EAAQE,EAAS,MAQpC,wBACG4B,GAAMlC,EAAMmC,KACZlC,IAAKA,EACLc,MAAO,CACLL,MAAO,QACPI,OAAO,QAEPsB,WAAY,+CAO1B,SAASC,EAAYrC,GACnB,MAAiCsC,mBAAS,GAA1C,mBAAOC,EAAP,KAAoBC,EAApB,KAUA,OAEI,wBAAQC,UAAY,aAAaC,QAXjB,WAClBC,QAAQC,IAAI5C,EAAM6C,YAAc,mBAChCL,EAAUD,EAAc,KACxBI,QAAQC,IAAIL,GACZO,SAASC,eAAe/C,EAAM6C,aAAa9B,MAAMiC,UACjD,UAAYT,EAAc,QAMxB,kBAON,SAASU,IACP,MAA4BX,mBAAS,IAArC,mBAAOY,EAAP,KAAeC,EAAf,KAWA,OATAhD,qBAAW,WACTiD,IAAM,CACJC,OAAO,MACPC,IAAK,yCACJC,MAAK,SAAAC,GACNL,EAAUK,EAASC,WALvBtD,CAOG,IAGD,8BACE,6BACG+C,EAAOQ,KAAI,SAAAC,GAAC,OACX,6BAAgBA,EAAEC,MAATD,EAAEzB,WAQrB2B,IAASC,OACP,cAACb,EAAD,IACAH,SAASC,eAAe,kBAI1Bc,IAASC,OACP,qCACA,cAAC,EAAD,CAAQ3B,KAAO,iBACf,cAACE,EAAD,CAAYQ,YAAc,oBAE1BC,SAASC,eAAe,eA+B1B,IAAMtC,EAAgB,SAAAH,GACpB,IAAIyD,EACFzD,EAAQ0D,wBACR1D,EAAQ2D,8BACR3D,EAAQ4D,2BACR5D,EAAQ6D,0BACR7D,EAAQ8D,yBACR9D,EAAQ0D,wBACR,EAEF,OAAQK,OAAOC,kBAAoB,GAAKP,K","file":"static/js/main.f6730c25.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\n\nimport reportWebVitals from './reportWebVitals';\n\n\n\n const Circle = (props) => {\n     let ref = useRef();\n     \n     useEffect(() => {\n        let canvas = ref.current;\n        let context = canvas.getContext('2d');\n         \n        let ratio = getPixelRatio(context);\n        let width = getComputedStyle(canvas)\n            .getPropertyValue('width')\n            .slice(0, -2);\n        let height = getComputedStyle(canvas)\n            .getPropertyValue('height')\n            .slice(0, -2);\n         \n        canvas.width = width * ratio;\n\n        canvas.height = height * ratio;\n        canvas.style.width = `${width}px`;\n        canvas.style.height = `${height}px`;\n\n        \n        const render = () =>{\n          drawFullboxCircle(canvas, context, 5);\n        }; \n\n        render();\n\n     });\n     \n     return (\n         <canvas \n            id = {props.myId}\n            ref={ref} \n            style={{ \n              width: '500px',\n              height:'500px' ,\n               \n              transition: 'all cubic-bezier(0.23, 0.64, 0.36, 1) 5s'\n            }}\n         />\n     );\n };\n  \n\nfunction RollButton (props) {\n  const [rotatecount, setRotate] = useState(0);\n  const handleClick = ()=> {\n    console.log(props.elementName + ' start spinning')\n    setRotate(rotatecount + 360)\n    console.log(rotatecount)\n    document.getElementById(props.elementName).style.transform = \n    'rotate(' + rotatecount + 'deg)';\n  }\n\n  \n  return (\n    \n      <button className = 'rollButton' onClick = {handleClick}>\n        Roll\n      </button>\n    \n  )\n};\n\nfunction GenreAPI() {\n  const [genres, setGenres] = useState([]);\n\n  useEffect( () =>{\n    axios({\n      method:'GET',\n      url: 'http://127.0.0.1:8000/api/genre/all/'\n    }).then(response => {\n      setGenres(response.data)\n    })\n  })([]);\n\n  return (\n    <div>\n      <ul>\n        {genres.map(g => (\n          <li key={g.id}>{g.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n\n};\n\nReactDOM.render(\n  <GenreAPI/>,\n  document.getElementById('settings-root')\n);\n\n\nReactDOM.render(\n  <>\n  <Circle myId = 'wheel-canvas' />\n  <RollButton elementName = 'wheel-canvas'/>\n  </>,\n  document.getElementById('wheel-root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nfunction drawFullboxCircle(canvas, context, splitCount) {\n  let CicleSize = canvas.width;\n  let radius = CicleSize/2 ;\n  let x = radius;\n  let y = radius;\n\n  let splitAngle = 2* Math.PI / splitCount;\n\n  for (let i=0; i< splitCount;i++){\n    context.beginPath();\n    context.moveTo(x, y);\n    context.arc(x, y, radius, i*splitAngle, (i+1)*splitAngle,false);\n    context.lineWidth = radius;\n    let hueValue = i*15;\n    context.fillStyle = 'hsl(' + hueValue + ',70%, 60%)'; \n\n\n    context.fill();\n    context.lineWidth = 2;\n    context.strokeStyle = '#444';\n    context.stroke()\n  }\n};\n\nconst getPixelRatio = context => {\n  let backingStore =   \n    context.backingStorePixelRatio ||\n    context.webkitBackingStorePixelRatio ||\n    context.mozBackingStorePixelRatio ||\n    context.msBackingStorePixelRatio ||\n    context.oBackingStorePixelRatio ||\n    context.backingStorePixelRatio ||\n    1;\n\n  return (window.devicePixelRatio || 1) / backingStore;\n};\n"],"sourceRoot":""}